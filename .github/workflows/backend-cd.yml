name: CD - Version, Build and Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - backend/**

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  version:
    name: Create New Version
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15.7
        env:
          POSTGRES_USER: customer
          POSTGRES_PASSWORD: customer
          POSTGRES_DB: customer
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    needs: version
    if: needs.version.outputs.new_release_published == 'true'
    defaults:
      run:
        working-directory: ./backend
    outputs:
      image_tag: ${{ needs.version.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Build and Push Docker image with Maven Jib
        run: mvn -ntp -B verify -Ddocker.image.tag=${{ needs.version.outputs.new_release_version }} jib:build
      - name: Publish coverage report to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./backend/target/site/jacoco/jacoco.xml
          base-path: ./backend/src/main/java

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: [version, build]
    if: needs.version.outputs.new_release_published == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Update Dockerrun.aws.json api image tag with new version
        run: |
          echo "Using image tag from version job: ${{ needs.version.outputs.new_release_version }}"
          echo "Dockerrun.aws.json before updating tag"
          cat ./Dockerrun.aws.json
          sed -i -E 's_(devgerman/customer-api:)([^"]*)_\1'${{ needs.version.outputs.new_release_version }}'_' ./Dockerrun.aws.json
          echo "Dockerrun.aws.json after updating tag"
          cat ./Dockerrun.aws.json
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
          version_label: ${{ needs.version.outputs.new_release_version }}
          version_description: "Release ${{ needs.version.outputs.new_release_version }} - ${{ github.SHA }}"
          region: ${{ secrets.EB_REGION }}
          deployment_package: Dockerrun.aws.json